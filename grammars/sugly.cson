name: 'Sugly'
scopeName: 'source.sugly'
fileTypes: [
  'sugly'
  's'
]
foldingStartMarker: '\\(\\s*$'
foldingStopMarker: '^\\s*\\)[\\.\\,]?'
patterns: [
  {
    name: 'comment.line.number-sign.sugly'
    match: '(#).*[$\\n]'
    captures:
      1:
        name: 'punctuation.definition.comment.sugly'
  }
  {
    name: 'keyword.control.punctuation.sugly'
    match: '\\$|\\:|\\@|\\`'
  }
  {
    name: 'meta.sugly-language-constants'
    match: '(?:\\(|\\)|\\s)\\s*(null|true|false|NaN|Infinity)(?=\\(|\\)|\\s)'
    captures:
        1:
          name: 'constant.language.sugly'
  }
  {
    name: 'meta.sugly-declare-function'
    match: '(?:\\()\\s*(let|var|global)\\s+(\\w[\\w\\-]*)(?=\\s*\\(\\s*((\\=\\s*\\>?)|(function|lambda)(\\s|\\(|\\))))'
    captures:
      1:
        name: 'keyword.control.let.function.sugly'
      2:
        name: 'entity.name.function.sugly'
  }
  {
    name: 'meta.sugly-delcare-variable'
    match: '(?:\\()\\s*(let|var|global)\\s+(\\w[\\w\\-]*)(?=[\\)\\s])'
    captures:
      1:
        name: 'keyword.control.let.variable.sugly'
      2:
        name: 'variable.other.sugly'
  }
  {
    name: 'meta.sugly-delcare-operator'
    match: '(?:\\()\\s*(operator)\\s+(export)(?=\\s|\\)|\\()'
    captures:
      1:
        name: 'keyword.control.sugly'
      2:
        name: 'storage.modifier.sugly'
  }
  {
    name: 'meta.sugly-control-keywords'
    match: '(?:\\(|\\)|\\s)\\s*(quote|let|var|global|return|exit|halt|if|else|while|for|in|break|continue|operator|assert)(?=\\(|\\)|\\s)'
    captures:
        1:
          name: 'keyword.control.sugly'
  }
  {
    name: 'meta.sugly-else-in-invalid-position'
    match: '(?:\\()\\s*(else|in)(?=\\)|\\(|\\s)'
    captures:
      1:
        name: 'invalid.illegal.sugly'
  }
  {
    name: 'meta.sugly-general-operators'
    match: '(?:\\(|\\)|\\s)\\s*(\\`|\\+|\\+\\+|\\+\\=|\\-|\\-\\-|\\-\\=|\\*|\\*\\=|\\/|\\/\\=|\\&\\&|\\|\\||\\!|\\?|\\?\\?)(?=\\(|\\)|\\s)'
    captures:
      1:
        name: 'keyword.control.sugly'
  }
  {
    name: 'meta.sugly-comparison-operators'
    match: '(?:\\(|\\)|\\s)\\s*(\\>|\\>\\=|\\<|\\<\\=|\\=\\=|\\!\\=)(?=\\(|\\)|\\s)'
    captures:
      1:
        name: 'keyword.control.sugly'
  }
  {
    name: 'meta.sugly-encode-clause'
    match: '(?:\\()\\s*(encode)\\s+(bool|number|string|symbol|object|function|date|array|value|clause|program)(?=\\s|\\)|\\()'
    captures:
      1:
        name: 'support.variable.sugly'
      2:
        name: 'support.function.sugly'
  }
  {
    name: 'meta.sugly-print-clause'
    match: '(?:\\()\\s*(print)\\s+(code|value|clause|program|info|warn)(?=\\)|\\(|\\s)'
    captures:
      1:
        name: 'support.variable.sugly'
      2:
        name: 'support.function.sugly'
  }
  {
    name: 'meta.sugly-uri-clause'
    match: '(?:\\()\\s*(uri)\\s+(encode|decode|escape|unescape)(?=\\)|\\(|\\s)'
    captures:
      1:
        name: 'support.variable.sugly'
      2:
        name: 'support.function.sugly'
  }
  {
    name: 'meta.sugly-math-constants'
    match: '(?:\\()\\s*(math)\\s+(E|LN2|LN10|LOG2E|LOG10E|PI|SQRT2|SQRT1_2)(?=\\)|\\(|\\s)'
    captures:
      1:
        name: 'support.variable.sugly'
      2:
        name: 'support.constant.sugly'
  }
  {
    name: 'meta.sugly-math-clause'
    match: '(?:\\()\\s*(math)\\s+(abs|ceil|floor|round|sin|cos|tan|asin|acos|atan|atan2|exp|log|pow|max|min|random)(?=\\)|\\(|\\s)'
    captures:
      1:
        name: 'support.variable.sugly'
      2:
        name: 'support.function.sugly'
  }
  {
    name: 'meta.sugly-json-clause'
    match: '(?:\\()\\s*(json)\\s+(parse|of)(?=\\)|\\(|\\s)'
    captures:
      1:
        name: 'support.variable.sugly'
      2:
        name: 'support.function.sugly'
  }
  {
    name: 'meta.sugly-generic-types'
    match: '(?:\\(|\\)|\\s)\\s*(Type|Bool|Number|Int|Float|String|Symbol|Function)(?=\\(|\\)|\\s)'
    captures:
      1:
        name: 'support.class.sugly'
  }
  {
    name: 'meta.sugly-generic-classes'
    match: '(?:\\(|\\)|\\s)\\s*(Class|Object|Date|Array)(?=\\(|\\)|\\s)'
    captures:
      1:
        name: 'support.class.sugly'
  }
  {
    name: 'meta.sugly-function-groups'
    match: '(?:\\(|\\)|\\s)\\s*(encode|print|uri|math|json|runtime)(?=\\(|\\)|\\s)'
    captures:
      1:
        name: 'support.variable.sugly'
  }
  {
    name: 'meta.sugly-general-functions'
    match: '\\s(value\\-of|create|new|is|is\\-not|is\\-a|is\\-not\\-a|equals|not\\-equals|type|get\\-type|super|is\\-empty|not\\-empty|to\\-code|to\\-string|to\\-clause|to\\-program)(?=\\)|\\(|\\s)'
    captures:
      1:
        name: 'support.function.sugly'
  }
  {
    name: 'meta.sugly-type-function'
    match: '(?:\\()\\s*(bool|number|string|symbol|object|class|function|lambda|date|array)(?=\\s|\\)|\\()'
    captures:
      1:
        name: 'support.function.sugly'
  }
  {
    name: 'meta.sugly-global-function'
    match: '(?:\\()\\s*(range|iterate|compile|encoder|export|eval|load|exec|run|import|require|retire|define|should)(?=\\s|\\)|\\()'
    captures:
      1:
        name: 'support.function.sugly'
  }
  {
    name: 'meta.sugly-invoke-function'
    match: '(?:\\()\\s*(apply|call|execute)(?=\\s|\\)|\\()'
    captures:
      1:
        name: 'support.function.sugly'
  }
  {
    name: 'meta.sugly-function-variables'
    match: '(?:\\(|\\)|\\s)(argc|argv|this)(?=\\(|\\)|\\s)'
    captures:
      1:
        name: 'variable.language.sugly'
  }
  {
    name: 'meta.sugly-function-recursion'
    match: '(?:\\(|\\)|\\s)(do)(?=\\(|\\)|\\s)'
    captures:
      1:
        name: 'support.function.sugly'
  }
  {
    name: 'meta.sugly-single-parameter-function'
    match: '(?:\\()\\s*(\\=\\s*[\\>]?)\\s+(\\w[\\w\\-]*)(?=\\s|\\(|\\))'
    captures:
      1:
        name: 'keyword.control.function.sugly'
      2:
        name: 'variable.parameter.sugly'
  }
  {
    name: 'meta.sugly-multiple-parameter-function'
    match: '(?:\\()\\s*(\\=\\s*[\\>]?)\\s*(?:\\()(.*)(?:\\))'
    captures:
      1:
        name: 'keyword.control.function.sugly'
      2:
        name: 'variable.parameter.sugly'
  }
  {
    name: 'meta.sugly-operator-operands'
    match: '(?:\\(|\\)|\\s)(\\%[CV\\d])(?=\\(|\\)|\\s)'
    captures:
      1:
        name: 'variable.language.sugly'
  }
  {
    name: 'meta.sugly-subject-or-predicate'
    match: '(?:\\()\\s*(\\w[\\w\\-]*)(?=\\(|\\)|\\s|\\:\\")'
    captures:
      1:
        name: 'entity.name.sugly'
  }
  {
    name: 'constant.numeric.sugly'
    match: '\\b((([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)\\b'
  }
  {
    begin: '"'
    beginCaptures:
      0:
        name: 'punctuation.definition.string.begin.sugly'
    end: '"'
    endCaptures:
      0:
        name: 'punctuation.definition.string.end.sugly'
    name: 'string.quoted.double.sugly'
    patterns: [
      {
        match: '\\\\.'
        name: 'constant.character.escape.sugly'
      }
    ]
  }
]
