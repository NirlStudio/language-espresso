{
  "name": "Sugly",
  "scopeName": "source.sugly",
  "fileTypes": [
    "sugly",
    "s"
  ],
  "foldingStartMarker": "\\(\\s*$",
  "foldingStopMarker": "^\\s*\\)[\\.\\,]?",
  "patterns": [
    {
      "name": "comment.line.number-sign.sugly",
      "match": "(#).*$\\n?",
      "captures": {
        "1": {
          "name": "punctuation.definition.comment.sugly"
        }
      }
    },
    {
      "name": "keyword.other.punctuation.sugly",
      "match": "[\\:\\@\\`\\$]"
    },
    {
      "name": "meta.keyword.quote.sugly",
      "match": "\\(\\s*(quote)\\b",
      "captures": {
        "1": {
          "name": "keyword.other.quote.sugly"
        }
      }
    },
    {
      "name": "meta.keyword.assignment.sugly",
      "match": "\\(\\s*(let|var|export)\\b",
      "captures": {
        "1": {
          "name": "keyword.other.assignment.sugly"
        }
      }
    },
    {
      "name": "meta.control.flow.sugly",
      "match": "\\(\\s*(if|for|while|break|continue)\\b",
      "captures": {
        "1": {
          "name": "keyword.control.flow.sugly"
        }
      }
    },
    {
      "name": "meta.control.preposition.sugly",
      "match": "\\b(else|in)\\b",
      "captures": {
        "1": {
          "name": "keyword.control.preposition.sugly"
        }
      }
    },
    {
      "name": "meta.control.procedure.sugly",
      "match": "\\(\\s*(redo|return|exit)\\b",
      "captures": {
        "1": {
          "name": "keyword.control.procedure.sugly"
        }
      }
    },
    {
      "name": "meta.function.self.sugly",
      "match": "\\b(do)\\b",
      "captures": {
        "1": {
          "name": "support.function.self.sugly"
        }
      }
    },
    {
      "name": "meta.variable.language.sugly",
      "match": "\\b(this|arguments|operant|operands)\\b",
      "captures": {
        "1": {
          "name": "variable.language.sugly"
        }
      }
    },
    {
      "name": "meta.type.generic.sugly",
      "match": "\\b(type|bool|number|date|string|range|symbol|tuple|operator|lambda|function|array|object|class)\\b",
      "captures": {
        "1": {
          "name": "storage.type.generic.sugly"
        }
      }
    },
    {
      "name": "meta.constant.language.sugly",
      "match": "\\b(null|true|false)\\b",
      "captures": {
        "1": {
          "name": "constant.language.sugly"
        }
      }
    },
    {
      "name": "meta.operator.operator-decl.sugly",
      "match": "\\(\\s*(\\=\\?)(?=\\(|\\)|\\s)",
      "captures": {
        "1": {
          "name": "keyword.other.operator-decl.sugly"
        }
      }
    },
    {
      "name": "meta.operator.lambda-decl.sugly",
      "match": "\\(\\s*(\\=[\\>]?)(?=\\(|\\)|\\s)",
      "captures": {
        "1": {
          "name": "support.function.lambda-decl.sugly"
        }
      }
    },
    {
      "name": "meta.operator.global.sugly",
      "match": "\\(\\s*(\\+|\\?|\\!|\\~)(?=\\(|\\)|\\s)",
      "captures": {
        "1": {
          "name": "keyword.other.global.sugly"
        }
      }
    },
    {
      "name": "meta.operator.double.sugly",
      "match": "\\(\\s*(\\+\\+|\\-\\-)(?=\\(|\\)|\\s)",
      "captures": {
        "1": {
          "name": "keyword.other.double.sugly"
        }
      }
    },
    {
      "name": "meta.operator.general.sugly",
      "match": "(?:\\)|\\s)(\\?\\??|\\&\\&|\\|\\|)(?=\\(|\\)|\\s)",
      "captures": {
        "1": {
          "name": "keyword.operator.general.sugly"
        }
      }
    },
    {
      "name": "meta.operator.arithmetic.sugly",
      "match": "(?:\\)|\\s)(\\+[\\+\\=]?|\\-[\\-\\=]?|\\*[\\=]?|\\/[\\=]?)(?=\\(|\\)|\\s)",
      "captures": {
        "1": {
          "name": "keyword.operator.arithmetic.sugly"
        }
      }
    },
    {
      "name": "meta.operator.bitwise.sugly",
      "match": "(?:\\)|\\s)(\\&[\\=]?|\\|[\\=]?|\\^[\\=]?|\\<\\<[\\=]?|\\>{2,3}[\\=]?)(?=\\(|\\)|\\s)",
      "captures": {
        "1": {
          "name": "keyword.operator.bitwise.sugly"
        }
      }
    },
    {
      "name": "meta.operator.comparison.sugly",
      "match": "(?:\\)|\\s)([\\=\\!][\\=]|[\\>\\<][\\=]?)(?=\\(|\\)|\\s)",
      "captures": {
        "1": {
          "name": "keyword.operator.sugly"
        }
      }
    },
    {
      "name": "meta.function.entity.sugly",
      "match": "(?:\\)|\\s)(is|is\\-not|equals|not\\-equals|compare|is\\-empty|not\\-empty|is\\-a|is\\-not\\-a|to\\-code|to\\-string)(?=\\)|\\(|\\s)",
      "captures": {
        "1": {
          "name": "support.function.sugly"
        }
      }
    },
    {
      "name": "meta.function.type.sugly",
      "match": "(?:\\)|\\s)(of|indexer\\-of|objectify|typify)(?=\\)|\\(|\\s)",
      "captures": {
        "1": {
          "name": "support.function.sugly"
        }
      }
    },
    {
      "name": "meta.constant.empty.sugly",
      "match": "(?:\\()\\s*(bool|string|number|date|range|symbol|tuple)\\s+(empty)\\b",
      "captures": {
        "1": {
          "name": "storage.type.generic.sugly"
        },
        "2": {
          "name": "support.constant.empty.sugly"
        }
      }
    },
    {
      "name": "meta.operator.empty.sugly",
      "match": "(?:\\()\\s*(operator)\\s+(empty)\\b",
      "captures": {
        "1": {
          "name": "storage.type.generic.sugly"
        },
        "2": {
          "name": "keyword.other.operator-empty.sugly"
        }
      }
    },
    {
      "name": "meta.function.empty.sugly",
      "match": "(?:\\()\\s*(lambda|function|array|object|class)\\s+(empty)\\b",
      "captures": {
        "1": {
          "name": "storage.type.generic.sugly"
        },
        "2": {
          "name": "support.function.empty.sugly"
        }
      }
    },
    {
      "name": "meta.function.other.empty.sugly",
      "match": "(?:\\)|\\s)(empty)\\b",
      "captures": {
        "1": {
          "name": "support.function.other.empty.sugly"
        }
      }
    },
    {
      "name": "meta.function.other.empty.sugly",
      "match": "(?:\\)|\\s)(empty)\\b",
      "captures": {
        "1": {
          "name": "support.function.other.empty.sugly"
        }
      }
    },
    {
      "name": "meta.function.iteration.sugly",
      "match": "\\b(iterate|iterator|select|selector|collect|collector|reduce|reducer)\\b",
      "captures": {
        "1": {
          "name": "support.function.iteration.sugly"
        }
      }
    },
    {
      "name": "meta.function.runtime.sugly",
      "match": "\\b(compile|compiler|tokenize|tokenizer|interpreter|eval|import|load|include|run)\\b",
      "captures": {
        "1": {
          "name": "support.function.runtime.sugly"
        }
      }
    },
    {
      "name": "meta.function.lib.sugly",
      "match": "\\b(encode|print|warn)\\b",
      "captures": {
        "1": {
          "name": "support.function.lib.sugly"
        }
      }
    },
    {
      "name": "meta.object.lib.sugly",
      "match": "\\b(uri|math|json)\\b",
      "captures": {
        "1": {
          "name": "support.variable.object.lib.sugly"
        }
      }
    },
    {
      "name": "meta.class.lib.sugly",
      "match": "\\b(emmiter|timer)\\b",
      "captures": {
        "1": {
          "name": "support.class.lib.sugly"
        }
      }
    },
    {
      "name": "meta.function.test.sugly",
      "match": "\\b(define|should|test)\\b",
      "captures": {
        "1": {
          "name": "support.function.test.sugly"
        }
      }
    },
    {
      "name": "meta.operator.test.sugly",
      "match": "\\b(assert)\\b",
      "captures": {
        "1": {
          "name": "keyword.other.assert.test.sugly"
        }
      }
    },
    {
      "name": "constant.numeric.oct.sugly",
      "match": "\\b(0[0-7]+)\\b"
    },
    {
      "name": "constant.numeric.hex.sugly",
      "match": "\\b(0x[0-9a-fA-F]+)\\b"
    },
    {
      "name": "constant.numeric.binary.sugly",
      "match": "\\b(0b[01]+)\\b"
    },
    {
      "name": "constant.numeric.decimal.sugly",
      "match": "\\b((([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)\\b"
    },
    {
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.sugly"
        }
      },
      "end": "\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.sugly"
        }
      },
      "name": "string.quoted.double.sugly",
      "patterns": [
        {
          "match": "\\\\.",
          "name": "constant.character.escape.sugly"
        }
      ]
    }
  ]
}
